import { MenuEntryConfig, MenuEntryType } from 'lkt-vue-kernel';
type __VLS_Props = {
    modelValue?: MenuEntryConfig;
};
declare const entry: import("vue").Ref<{
    key?: string | undefined;
    type?: MenuEntryType | undefined;
    icon?: string | undefined;
    anchor?: {
        type?: import("lkt-vue-kernel").AnchorType | undefined;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class?: string | undefined;
        isActive?: boolean | undefined;
        downloadFileName?: string | undefined;
        disabled?: boolean | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: import("lkt-vue-kernel").LktObject | undefined;
            confirmButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: /*elided*/ any | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | {
                    [x: string]: any;
                    [x: number]: any;
                    modalName?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    zIndex?: number | undefined;
                    type?: import("lkt-vue-kernel").ModalType | undefined;
                    size?: string | undefined;
                    preTitle?: string | undefined;
                    preTitleIcon?: string | undefined;
                    title?: string | undefined;
                    closeIcon?: string | undefined;
                    closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                    closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                    showClose?: boolean | undefined;
                    disabledClose?: boolean | undefined;
                    disabledVeilClick?: boolean | undefined;
                    hiddenFooter?: boolean | undefined;
                    beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                    item?: import("lkt-vue-kernel").LktObject | undefined;
                    confirmButton?: /*elided*/ any | undefined;
                    cancelButton?: /*elided*/ any | undefined;
                } | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: {
                    [x: string]: any;
                    [x: number]: any;
                    modalName?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    zIndex?: number | undefined;
                    type?: import("lkt-vue-kernel").ModalType | undefined;
                    size?: string | undefined;
                    preTitle?: string | undefined;
                    preTitleIcon?: string | undefined;
                    title?: string | undefined;
                    closeIcon?: string | undefined;
                    closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                    closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                    showClose?: boolean | undefined;
                    disabledClose?: boolean | undefined;
                    disabledVeilClick?: boolean | undefined;
                    hiddenFooter?: boolean | undefined;
                    beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                    item?: import("lkt-vue-kernel").LktObject | undefined;
                    confirmButton?: /*elided*/ any | undefined;
                    cancelButton?: /*elided*/ any | undefined;
                } | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
            cancelButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: /*elided*/ any | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | {
                    [x: string]: any;
                    [x: number]: any;
                    modalName?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    zIndex?: number | undefined;
                    type?: import("lkt-vue-kernel").ModalType | undefined;
                    size?: string | undefined;
                    preTitle?: string | undefined;
                    preTitleIcon?: string | undefined;
                    title?: string | undefined;
                    closeIcon?: string | undefined;
                    closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                    closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                    showClose?: boolean | undefined;
                    disabledClose?: boolean | undefined;
                    disabledVeilClick?: boolean | undefined;
                    hiddenFooter?: boolean | undefined;
                    beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                    item?: import("lkt-vue-kernel").LktObject | undefined;
                    confirmButton?: /*elided*/ any | undefined;
                    cancelButton?: /*elided*/ any | undefined;
                } | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: {
                    [x: string]: any;
                    [x: number]: any;
                    modalName?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    zIndex?: number | undefined;
                    type?: import("lkt-vue-kernel").ModalType | undefined;
                    size?: string | undefined;
                    preTitle?: string | undefined;
                    preTitleIcon?: string | undefined;
                    title?: string | undefined;
                    closeIcon?: string | undefined;
                    closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                    closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                    showClose?: boolean | undefined;
                    disabledClose?: boolean | undefined;
                    disabledVeilClick?: boolean | undefined;
                    hiddenFooter?: boolean | undefined;
                    beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                    item?: import("lkt-vue-kernel").LktObject | undefined;
                    confirmButton?: /*elided*/ any | undefined;
                    cancelButton?: /*elided*/ any | undefined;
                } | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        imposter?: boolean | undefined;
        external?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        onClick?: Function | undefined;
    } | undefined;
    button?: {
        type?: import("lkt-vue-kernel").ButtonType | undefined;
        name?: string | undefined;
        value?: string | undefined;
        disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
        openTooltip?: boolean | undefined;
        loading?: boolean | undefined;
        class?: string | undefined;
        containerClass?: string | undefined;
        wrapContent?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        icon?: string | undefined;
        iconEnd?: string | undefined;
        img?: string | undefined;
        checked?: boolean | undefined;
        textOn?: import("lkt-vue-kernel").ValidTextValue;
        textOff?: import("lkt-vue-kernel").ValidTextValue;
        iconOn?: import("lkt-vue-kernel").ValidTextValue;
        iconOff?: import("lkt-vue-kernel").ValidTextValue;
        iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
        iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
        dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
        anchor?: {
            type?: import("lkt-vue-kernel").AnchorType | undefined;
            to?: string | {
                name?: import("vue-router").RouteRecordNameGeneric;
                params?: import("vue-router").RouteParamsRawGeneric | undefined;
                path?: undefined | undefined;
                query?: import("vue-router").LocationQueryRaw | undefined;
                hash?: string | undefined;
                replace?: boolean | undefined;
                force?: boolean | undefined;
                state?: import("vue-router").HistoryState | undefined;
            } | {
                path: string;
                query?: import("vue-router").LocationQueryRaw | undefined;
                hash?: string | undefined;
                replace?: boolean | undefined;
                force?: boolean | undefined;
                state?: import("vue-router").HistoryState | undefined;
            } | undefined;
            class?: string | undefined;
            isActive?: boolean | undefined;
            downloadFileName?: string | undefined;
            disabled?: boolean | undefined;
            confirmModal?: import("lkt-vue-kernel").ValidModalName;
            confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
            confirmData?: {
                [x: string]: any;
                [x: number]: any;
                modalName?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                zIndex?: number | undefined;
                type?: import("lkt-vue-kernel").ModalType | undefined;
                size?: string | undefined;
                preTitle?: string | undefined;
                preTitleIcon?: string | undefined;
                title?: string | undefined;
                closeIcon?: string | undefined;
                closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                showClose?: boolean | undefined;
                disabledClose?: boolean | undefined;
                disabledVeilClick?: boolean | undefined;
                hiddenFooter?: boolean | undefined;
                beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                item?: import("lkt-vue-kernel").LktObject | undefined;
                confirmButton?: {
                    type?: import("lkt-vue-kernel").ButtonType | undefined;
                    name?: string | undefined;
                    value?: string | undefined;
                    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                    openTooltip?: boolean | undefined;
                    loading?: boolean | undefined;
                    class?: string | undefined;
                    containerClass?: string | undefined;
                    wrapContent?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    icon?: string | undefined;
                    iconEnd?: string | undefined;
                    img?: string | undefined;
                    checked?: boolean | undefined;
                    textOn?: import("lkt-vue-kernel").ValidTextValue;
                    textOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                    anchor?: /*elided*/ any | {
                        type: import("lkt-vue-kernel").AnchorType;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class: string;
                        isActive: boolean;
                        downloadFileName: string;
                        disabled: boolean;
                        onClick: Function | undefined;
                        confirmModal: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                        confirmData: import("lkt-vue-kernel").LktObject;
                        imposter: boolean;
                        external: boolean;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        getHref: () => string;
                        feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                        assignProp: (key: string, value: any) => void;
                    } | undefined;
                    resource?: string | undefined;
                    resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                    modal?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    modalData?: Function | {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    modalCallbacks?: {
                        modalName: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        action: import("lkt-vue-kernel").ModalCallbackAction;
                        method?: string | undefined;
                        args?: import("lkt-vue-kernel").LktObject | undefined;
                    }[] | undefined;
                    tooltip?: {
                        modelValue?: boolean | undefined;
                        alwaysOpen?: boolean | undefined;
                        class?: string | undefined;
                        text?: string | undefined;
                        icon?: string | undefined;
                        iconAtEnd?: boolean | undefined;
                        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                        referrerMargin?: number | string | undefined;
                        windowMargin?: number | string | undefined;
                        referrerWidth?: boolean | undefined;
                        referrer?: HTMLElement | undefined;
                        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                        showOnReferrerHover?: boolean | undefined;
                        showOnReferrerHoverDelay?: number | undefined;
                        hideOnReferrerLeave?: boolean | undefined;
                        hideOnReferrerLeaveDelay?: number | undefined;
                    } | undefined;
                    splitIcon?: string | undefined;
                    showTooltipOnHover?: boolean | undefined;
                    showTooltipOnHoverDelay?: number | undefined;
                    hideTooltipOnLeave?: boolean | undefined;
                    splitClass?: string | undefined;
                    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                    prop?: import("lkt-vue-kernel").LktObject | undefined;
                    clickRef?: (Element | import("vue").VueElement) | undefined;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                } | undefined;
                cancelButton?: {
                    type?: import("lkt-vue-kernel").ButtonType | undefined;
                    name?: string | undefined;
                    value?: string | undefined;
                    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                    openTooltip?: boolean | undefined;
                    loading?: boolean | undefined;
                    class?: string | undefined;
                    containerClass?: string | undefined;
                    wrapContent?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    icon?: string | undefined;
                    iconEnd?: string | undefined;
                    img?: string | undefined;
                    checked?: boolean | undefined;
                    textOn?: import("lkt-vue-kernel").ValidTextValue;
                    textOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                    anchor?: /*elided*/ any | {
                        type: import("lkt-vue-kernel").AnchorType;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class: string;
                        isActive: boolean;
                        downloadFileName: string;
                        disabled: boolean;
                        onClick: Function | undefined;
                        confirmModal: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                        confirmData: import("lkt-vue-kernel").LktObject;
                        imposter: boolean;
                        external: boolean;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        getHref: () => string;
                        feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                        assignProp: (key: string, value: any) => void;
                    } | undefined;
                    resource?: string | undefined;
                    resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                    modal?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    modalData?: Function | {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    modalCallbacks?: {
                        modalName: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        action: import("lkt-vue-kernel").ModalCallbackAction;
                        method?: string | undefined;
                        args?: import("lkt-vue-kernel").LktObject | undefined;
                    }[] | undefined;
                    tooltip?: {
                        modelValue?: boolean | undefined;
                        alwaysOpen?: boolean | undefined;
                        class?: string | undefined;
                        text?: string | undefined;
                        icon?: string | undefined;
                        iconAtEnd?: boolean | undefined;
                        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                        referrerMargin?: number | string | undefined;
                        windowMargin?: number | string | undefined;
                        referrerWidth?: boolean | undefined;
                        referrer?: HTMLElement | undefined;
                        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                        showOnReferrerHover?: boolean | undefined;
                        showOnReferrerHoverDelay?: number | undefined;
                        hideOnReferrerLeave?: boolean | undefined;
                        hideOnReferrerLeaveDelay?: number | undefined;
                    } | undefined;
                    splitIcon?: string | undefined;
                    showTooltipOnHover?: boolean | undefined;
                    showTooltipOnHoverDelay?: number | undefined;
                    hideTooltipOnLeave?: boolean | undefined;
                    splitClass?: string | undefined;
                    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                    prop?: import("lkt-vue-kernel").LktObject | undefined;
                    clickRef?: (Element | import("vue").VueElement) | undefined;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            imposter?: boolean | undefined;
            external?: boolean | undefined;
            text?: import("lkt-vue-kernel").ValidTextValue;
            events?: {
                click?: Function | undefined;
            } | undefined;
            onClick?: Function | undefined;
        } | {
            type: import("lkt-vue-kernel").AnchorType;
            to?: string | {
                name?: import("vue-router").RouteRecordNameGeneric;
                params?: import("vue-router").RouteParamsRawGeneric | undefined;
                path?: undefined | undefined;
                query?: import("vue-router").LocationQueryRaw | undefined;
                hash?: string | undefined;
                replace?: boolean | undefined;
                force?: boolean | undefined;
                state?: import("vue-router").HistoryState | undefined;
            } | {
                path: string;
                query?: import("vue-router").LocationQueryRaw | undefined;
                hash?: string | undefined;
                replace?: boolean | undefined;
                force?: boolean | undefined;
                state?: import("vue-router").HistoryState | undefined;
            } | undefined;
            class: string;
            isActive: boolean;
            downloadFileName: string;
            disabled: boolean;
            onClick: Function | undefined;
            confirmModal: import("lkt-vue-kernel").ValidModalName;
            confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
            confirmData: import("lkt-vue-kernel").LktObject;
            imposter: boolean;
            external: boolean;
            text?: import("lkt-vue-kernel").ValidTextValue;
            events?: {
                click?: Function | undefined;
            } | undefined;
            getHref: () => string;
            feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
            assignProp: (key: string, value: any) => void;
        } | undefined;
        resource?: string | undefined;
        resourceData?: import("lkt-vue-kernel").LktObject | undefined;
        modal?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        modalData?: Function | {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: import("lkt-vue-kernel").LktObject | undefined;
            confirmButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: {
                    type?: import("lkt-vue-kernel").AnchorType | undefined;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class?: string | undefined;
                    isActive?: boolean | undefined;
                    downloadFileName?: string | undefined;
                    disabled?: boolean | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    imposter?: boolean | undefined;
                    external?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    onClick?: Function | undefined;
                } | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | /*elided*/ any | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: /*elided*/ any | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
            cancelButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: {
                    type?: import("lkt-vue-kernel").AnchorType | undefined;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class?: string | undefined;
                    isActive?: boolean | undefined;
                    downloadFileName?: string | undefined;
                    disabled?: boolean | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    imposter?: boolean | undefined;
                    external?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    onClick?: Function | undefined;
                } | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | /*elided*/ any | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: /*elided*/ any | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: import("lkt-vue-kernel").LktObject | undefined;
            confirmButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: {
                    type?: import("lkt-vue-kernel").AnchorType | undefined;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class?: string | undefined;
                    isActive?: boolean | undefined;
                    downloadFileName?: string | undefined;
                    disabled?: boolean | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    imposter?: boolean | undefined;
                    external?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    onClick?: Function | undefined;
                } | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | /*elided*/ any | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: /*elided*/ any | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
            cancelButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: {
                    type?: import("lkt-vue-kernel").AnchorType | undefined;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class?: string | undefined;
                    isActive?: boolean | undefined;
                    downloadFileName?: string | undefined;
                    disabled?: boolean | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    imposter?: boolean | undefined;
                    external?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    onClick?: Function | undefined;
                } | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | /*elided*/ any | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: /*elided*/ any | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        modalCallbacks?: {
            modalName: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            action: import("lkt-vue-kernel").ModalCallbackAction;
            method?: string | undefined;
            args?: import("lkt-vue-kernel").LktObject | undefined;
        }[] | undefined;
        tooltip?: {
            modelValue?: boolean | undefined;
            alwaysOpen?: boolean | undefined;
            class?: string | undefined;
            text?: string | undefined;
            icon?: string | undefined;
            iconAtEnd?: boolean | undefined;
            engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
            referrerMargin?: number | string | undefined;
            windowMargin?: number | string | undefined;
            referrerWidth?: boolean | undefined;
            referrer?: HTMLElement | undefined;
            locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
            locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
            showOnReferrerHover?: boolean | undefined;
            showOnReferrerHoverDelay?: number | undefined;
            hideOnReferrerLeave?: boolean | undefined;
            hideOnReferrerLeaveDelay?: number | undefined;
        } | undefined;
        splitIcon?: string | undefined;
        showTooltipOnHover?: boolean | undefined;
        showTooltipOnHoverDelay?: number | undefined;
        hideTooltipOnLeave?: boolean | undefined;
        splitClass?: string | undefined;
        tabindex?: import("lkt-vue-kernel").ValidTabIndex;
        prop?: import("lkt-vue-kernel").LktObject | undefined;
        clickRef?: (Element | import("vue").VueElement) | undefined;
        events?: {
            click?: Function | undefined;
        } | undefined;
    } | undefined;
    isActiveChecker?: Function | undefined;
    isOpened?: boolean | undefined;
    isActive?: boolean | undefined;
    parent?: /*elided*/ any | undefined;
    children?: /*elided*/ any[] | undefined;
    events?: {
        click?: Function | undefined;
    } | undefined;
    onClick?: Function | undefined;
}, MenuEntryConfig | {
    key?: string | undefined;
    type?: MenuEntryType | undefined;
    icon?: string | undefined;
    anchor?: {
        type?: import("lkt-vue-kernel").AnchorType | undefined;
        to?: string | {
            name?: import("vue-router").RouteRecordNameGeneric;
            params?: import("vue-router").RouteParamsRawGeneric | undefined;
            path?: undefined | undefined;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | {
            path: string;
            query?: import("vue-router").LocationQueryRaw | undefined;
            hash?: string | undefined;
            replace?: boolean | undefined;
            force?: boolean | undefined;
            state?: import("vue-router").HistoryState | undefined;
        } | undefined;
        class?: string | undefined;
        isActive?: boolean | undefined;
        downloadFileName?: string | undefined;
        disabled?: boolean | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: import("lkt-vue-kernel").LktObject | undefined;
            confirmButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: /*elided*/ any | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | {
                    [x: string]: any;
                    [x: number]: any;
                    modalName?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    zIndex?: number | undefined;
                    type?: import("lkt-vue-kernel").ModalType | undefined;
                    size?: string | undefined;
                    preTitle?: string | undefined;
                    preTitleIcon?: string | undefined;
                    title?: string | undefined;
                    closeIcon?: string | undefined;
                    closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                    closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                    showClose?: boolean | undefined;
                    disabledClose?: boolean | undefined;
                    disabledVeilClick?: boolean | undefined;
                    hiddenFooter?: boolean | undefined;
                    beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                    item?: import("lkt-vue-kernel").LktObject | undefined;
                    confirmButton?: /*elided*/ any | undefined;
                    cancelButton?: /*elided*/ any | undefined;
                } | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: {
                    [x: string]: any;
                    [x: number]: any;
                    modalName?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    zIndex?: number | undefined;
                    type?: import("lkt-vue-kernel").ModalType | undefined;
                    size?: string | undefined;
                    preTitle?: string | undefined;
                    preTitleIcon?: string | undefined;
                    title?: string | undefined;
                    closeIcon?: string | undefined;
                    closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                    closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                    showClose?: boolean | undefined;
                    disabledClose?: boolean | undefined;
                    disabledVeilClick?: boolean | undefined;
                    hiddenFooter?: boolean | undefined;
                    beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                    item?: import("lkt-vue-kernel").LktObject | undefined;
                    confirmButton?: /*elided*/ any | undefined;
                    cancelButton?: /*elided*/ any | undefined;
                } | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
            cancelButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: /*elided*/ any | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | {
                    [x: string]: any;
                    [x: number]: any;
                    modalName?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    zIndex?: number | undefined;
                    type?: import("lkt-vue-kernel").ModalType | undefined;
                    size?: string | undefined;
                    preTitle?: string | undefined;
                    preTitleIcon?: string | undefined;
                    title?: string | undefined;
                    closeIcon?: string | undefined;
                    closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                    closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                    showClose?: boolean | undefined;
                    disabledClose?: boolean | undefined;
                    disabledVeilClick?: boolean | undefined;
                    hiddenFooter?: boolean | undefined;
                    beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                    item?: import("lkt-vue-kernel").LktObject | undefined;
                    confirmButton?: /*elided*/ any | undefined;
                    cancelButton?: /*elided*/ any | undefined;
                } | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: {
                    [x: string]: any;
                    [x: number]: any;
                    modalName?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    zIndex?: number | undefined;
                    type?: import("lkt-vue-kernel").ModalType | undefined;
                    size?: string | undefined;
                    preTitle?: string | undefined;
                    preTitleIcon?: string | undefined;
                    title?: string | undefined;
                    closeIcon?: string | undefined;
                    closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                    closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                    showClose?: boolean | undefined;
                    disabledClose?: boolean | undefined;
                    disabledVeilClick?: boolean | undefined;
                    hiddenFooter?: boolean | undefined;
                    beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                    item?: import("lkt-vue-kernel").LktObject | undefined;
                    confirmButton?: /*elided*/ any | undefined;
                    cancelButton?: /*elided*/ any | undefined;
                } | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        imposter?: boolean | undefined;
        external?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        events?: {
            click?: Function | undefined;
        } | undefined;
        onClick?: Function | undefined;
    } | undefined;
    button?: {
        type?: import("lkt-vue-kernel").ButtonType | undefined;
        name?: string | undefined;
        value?: string | undefined;
        disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
        openTooltip?: boolean | undefined;
        loading?: boolean | undefined;
        class?: string | undefined;
        containerClass?: string | undefined;
        wrapContent?: boolean | undefined;
        text?: import("lkt-vue-kernel").ValidTextValue;
        icon?: string | undefined;
        iconEnd?: string | undefined;
        img?: string | undefined;
        checked?: boolean | undefined;
        textOn?: import("lkt-vue-kernel").ValidTextValue;
        textOff?: import("lkt-vue-kernel").ValidTextValue;
        iconOn?: import("lkt-vue-kernel").ValidTextValue;
        iconOff?: import("lkt-vue-kernel").ValidTextValue;
        iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
        iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
        dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
        anchor?: {
            type?: import("lkt-vue-kernel").AnchorType | undefined;
            to?: string | {
                name?: import("vue-router").RouteRecordNameGeneric;
                params?: import("vue-router").RouteParamsRawGeneric | undefined;
                path?: undefined | undefined;
                query?: import("vue-router").LocationQueryRaw | undefined;
                hash?: string | undefined;
                replace?: boolean | undefined;
                force?: boolean | undefined;
                state?: import("vue-router").HistoryState | undefined;
            } | {
                path: string;
                query?: import("vue-router").LocationQueryRaw | undefined;
                hash?: string | undefined;
                replace?: boolean | undefined;
                force?: boolean | undefined;
                state?: import("vue-router").HistoryState | undefined;
            } | undefined;
            class?: string | undefined;
            isActive?: boolean | undefined;
            downloadFileName?: string | undefined;
            disabled?: boolean | undefined;
            confirmModal?: import("lkt-vue-kernel").ValidModalName;
            confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
            confirmData?: {
                [x: string]: any;
                [x: number]: any;
                modalName?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                zIndex?: number | undefined;
                type?: import("lkt-vue-kernel").ModalType | undefined;
                size?: string | undefined;
                preTitle?: string | undefined;
                preTitleIcon?: string | undefined;
                title?: string | undefined;
                closeIcon?: string | undefined;
                closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                showClose?: boolean | undefined;
                disabledClose?: boolean | undefined;
                disabledVeilClick?: boolean | undefined;
                hiddenFooter?: boolean | undefined;
                beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                item?: import("lkt-vue-kernel").LktObject | undefined;
                confirmButton?: {
                    type?: import("lkt-vue-kernel").ButtonType | undefined;
                    name?: string | undefined;
                    value?: string | undefined;
                    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                    openTooltip?: boolean | undefined;
                    loading?: boolean | undefined;
                    class?: string | undefined;
                    containerClass?: string | undefined;
                    wrapContent?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    icon?: string | undefined;
                    iconEnd?: string | undefined;
                    img?: string | undefined;
                    checked?: boolean | undefined;
                    textOn?: import("lkt-vue-kernel").ValidTextValue;
                    textOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                    anchor?: /*elided*/ any | {
                        type: import("lkt-vue-kernel").AnchorType;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class: string;
                        isActive: boolean;
                        downloadFileName: string;
                        disabled: boolean;
                        onClick: Function | undefined;
                        confirmModal: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                        confirmData: import("lkt-vue-kernel").LktObject;
                        imposter: boolean;
                        external: boolean;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        getHref: () => string;
                        feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                        assignProp: (key: string, value: any) => void;
                    } | undefined;
                    resource?: string | undefined;
                    resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                    modal?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    modalData?: Function | {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    modalCallbacks?: {
                        modalName: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        action: import("lkt-vue-kernel").ModalCallbackAction;
                        method?: string | undefined;
                        args?: import("lkt-vue-kernel").LktObject | undefined;
                    }[] | undefined;
                    tooltip?: {
                        modelValue?: boolean | undefined;
                        alwaysOpen?: boolean | undefined;
                        class?: string | undefined;
                        text?: string | undefined;
                        icon?: string | undefined;
                        iconAtEnd?: boolean | undefined;
                        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                        referrerMargin?: number | string | undefined;
                        windowMargin?: number | string | undefined;
                        referrerWidth?: boolean | undefined;
                        referrer?: HTMLElement | undefined;
                        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                        showOnReferrerHover?: boolean | undefined;
                        showOnReferrerHoverDelay?: number | undefined;
                        hideOnReferrerLeave?: boolean | undefined;
                        hideOnReferrerLeaveDelay?: number | undefined;
                    } | undefined;
                    splitIcon?: string | undefined;
                    showTooltipOnHover?: boolean | undefined;
                    showTooltipOnHoverDelay?: number | undefined;
                    hideTooltipOnLeave?: boolean | undefined;
                    splitClass?: string | undefined;
                    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                    prop?: import("lkt-vue-kernel").LktObject | undefined;
                    clickRef?: (Element | import("vue").VueElement) | undefined;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                } | undefined;
                cancelButton?: {
                    type?: import("lkt-vue-kernel").ButtonType | undefined;
                    name?: string | undefined;
                    value?: string | undefined;
                    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                    openTooltip?: boolean | undefined;
                    loading?: boolean | undefined;
                    class?: string | undefined;
                    containerClass?: string | undefined;
                    wrapContent?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    icon?: string | undefined;
                    iconEnd?: string | undefined;
                    img?: string | undefined;
                    checked?: boolean | undefined;
                    textOn?: import("lkt-vue-kernel").ValidTextValue;
                    textOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                    anchor?: /*elided*/ any | {
                        type: import("lkt-vue-kernel").AnchorType;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class: string;
                        isActive: boolean;
                        downloadFileName: string;
                        disabled: boolean;
                        onClick: Function | undefined;
                        confirmModal: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                        confirmData: import("lkt-vue-kernel").LktObject;
                        imposter: boolean;
                        external: boolean;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        getHref: () => string;
                        feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                        assignProp: (key: string, value: any) => void;
                    } | undefined;
                    resource?: string | undefined;
                    resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                    modal?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    modalData?: Function | {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    modalCallbacks?: {
                        modalName: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        action: import("lkt-vue-kernel").ModalCallbackAction;
                        method?: string | undefined;
                        args?: import("lkt-vue-kernel").LktObject | undefined;
                    }[] | undefined;
                    tooltip?: {
                        modelValue?: boolean | undefined;
                        alwaysOpen?: boolean | undefined;
                        class?: string | undefined;
                        text?: string | undefined;
                        icon?: string | undefined;
                        iconAtEnd?: boolean | undefined;
                        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                        referrerMargin?: number | string | undefined;
                        windowMargin?: number | string | undefined;
                        referrerWidth?: boolean | undefined;
                        referrer?: HTMLElement | undefined;
                        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                        showOnReferrerHover?: boolean | undefined;
                        showOnReferrerHoverDelay?: number | undefined;
                        hideOnReferrerLeave?: boolean | undefined;
                        hideOnReferrerLeaveDelay?: number | undefined;
                    } | undefined;
                    splitIcon?: string | undefined;
                    showTooltipOnHover?: boolean | undefined;
                    showTooltipOnHoverDelay?: number | undefined;
                    hideTooltipOnLeave?: boolean | undefined;
                    splitClass?: string | undefined;
                    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                    prop?: import("lkt-vue-kernel").LktObject | undefined;
                    clickRef?: (Element | import("vue").VueElement) | undefined;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            imposter?: boolean | undefined;
            external?: boolean | undefined;
            text?: import("lkt-vue-kernel").ValidTextValue;
            events?: {
                click?: Function | undefined;
            } | undefined;
            onClick?: Function | undefined;
        } | {
            type: import("lkt-vue-kernel").AnchorType;
            to?: string | {
                name?: import("vue-router").RouteRecordNameGeneric;
                params?: import("vue-router").RouteParamsRawGeneric | undefined;
                path?: undefined | undefined;
                query?: import("vue-router").LocationQueryRaw | undefined;
                hash?: string | undefined;
                replace?: boolean | undefined;
                force?: boolean | undefined;
                state?: import("vue-router").HistoryState | undefined;
            } | {
                path: string;
                query?: import("vue-router").LocationQueryRaw | undefined;
                hash?: string | undefined;
                replace?: boolean | undefined;
                force?: boolean | undefined;
                state?: import("vue-router").HistoryState | undefined;
            } | undefined;
            class: string;
            isActive: boolean;
            downloadFileName: string;
            disabled: boolean;
            onClick: Function | undefined;
            confirmModal: import("lkt-vue-kernel").ValidModalName;
            confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
            confirmData: import("lkt-vue-kernel").LktObject;
            imposter: boolean;
            external: boolean;
            text?: import("lkt-vue-kernel").ValidTextValue;
            events?: {
                click?: Function | undefined;
            } | undefined;
            getHref: () => string;
            feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
            assignProp: (key: string, value: any) => void;
        } | undefined;
        resource?: string | undefined;
        resourceData?: import("lkt-vue-kernel").LktObject | undefined;
        modal?: import("lkt-vue-kernel").ValidModalName;
        modalKey?: import("lkt-vue-kernel").ValidModalKey;
        modalData?: Function | {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: import("lkt-vue-kernel").LktObject | undefined;
            confirmButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: {
                    type?: import("lkt-vue-kernel").AnchorType | undefined;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class?: string | undefined;
                    isActive?: boolean | undefined;
                    downloadFileName?: string | undefined;
                    disabled?: boolean | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    imposter?: boolean | undefined;
                    external?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    onClick?: Function | undefined;
                } | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | /*elided*/ any | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: /*elided*/ any | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
            cancelButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: {
                    type?: import("lkt-vue-kernel").AnchorType | undefined;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class?: string | undefined;
                    isActive?: boolean | undefined;
                    downloadFileName?: string | undefined;
                    disabled?: boolean | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    imposter?: boolean | undefined;
                    external?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    onClick?: Function | undefined;
                } | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | /*elided*/ any | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: /*elided*/ any | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        confirmModal?: import("lkt-vue-kernel").ValidModalName;
        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
        confirmData?: {
            [x: string]: any;
            [x: number]: any;
            modalName?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            zIndex?: number | undefined;
            type?: import("lkt-vue-kernel").ModalType | undefined;
            size?: string | undefined;
            preTitle?: string | undefined;
            preTitleIcon?: string | undefined;
            title?: string | undefined;
            closeIcon?: string | undefined;
            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
            showClose?: boolean | undefined;
            disabledClose?: boolean | undefined;
            disabledVeilClick?: boolean | undefined;
            hiddenFooter?: boolean | undefined;
            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
            item?: import("lkt-vue-kernel").LktObject | undefined;
            confirmButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: {
                    type?: import("lkt-vue-kernel").AnchorType | undefined;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class?: string | undefined;
                    isActive?: boolean | undefined;
                    downloadFileName?: string | undefined;
                    disabled?: boolean | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    imposter?: boolean | undefined;
                    external?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    onClick?: Function | undefined;
                } | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | /*elided*/ any | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: /*elided*/ any | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
            cancelButton?: {
                type?: import("lkt-vue-kernel").ButtonType | undefined;
                name?: string | undefined;
                value?: string | undefined;
                disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                openTooltip?: boolean | undefined;
                loading?: boolean | undefined;
                class?: string | undefined;
                containerClass?: string | undefined;
                wrapContent?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                icon?: string | undefined;
                iconEnd?: string | undefined;
                img?: string | undefined;
                checked?: boolean | undefined;
                textOn?: import("lkt-vue-kernel").ValidTextValue;
                textOff?: import("lkt-vue-kernel").ValidTextValue;
                iconOn?: import("lkt-vue-kernel").ValidTextValue;
                iconOff?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                anchor?: {
                    type?: import("lkt-vue-kernel").AnchorType | undefined;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class?: string | undefined;
                    isActive?: boolean | undefined;
                    downloadFileName?: string | undefined;
                    disabled?: boolean | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    imposter?: boolean | undefined;
                    external?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    onClick?: Function | undefined;
                } | {
                    type: import("lkt-vue-kernel").AnchorType;
                    to?: string | {
                        name?: import("vue-router").RouteRecordNameGeneric;
                        params?: import("vue-router").RouteParamsRawGeneric | undefined;
                        path?: undefined | undefined;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | {
                        path: string;
                        query?: import("vue-router").LocationQueryRaw | undefined;
                        hash?: string | undefined;
                        replace?: boolean | undefined;
                        force?: boolean | undefined;
                        state?: import("vue-router").HistoryState | undefined;
                    } | undefined;
                    class: string;
                    isActive: boolean;
                    downloadFileName: string;
                    disabled: boolean;
                    onClick: Function | undefined;
                    confirmModal: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                    confirmData: import("lkt-vue-kernel").LktObject;
                    imposter: boolean;
                    external: boolean;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                    getHref: () => string;
                    feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                    assignProp: (key: string, value: any) => void;
                } | undefined;
                resource?: string | undefined;
                resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                modal?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                modalData?: Function | /*elided*/ any | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: /*elided*/ any | undefined;
                modalCallbacks?: {
                    modalName: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    action: import("lkt-vue-kernel").ModalCallbackAction;
                    method?: string | undefined;
                    args?: import("lkt-vue-kernel").LktObject | undefined;
                }[] | undefined;
                tooltip?: {
                    modelValue?: boolean | undefined;
                    alwaysOpen?: boolean | undefined;
                    class?: string | undefined;
                    text?: string | undefined;
                    icon?: string | undefined;
                    iconAtEnd?: boolean | undefined;
                    engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                    referrerMargin?: number | string | undefined;
                    windowMargin?: number | string | undefined;
                    referrerWidth?: boolean | undefined;
                    referrer?: HTMLElement | undefined;
                    locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                    locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                    showOnReferrerHover?: boolean | undefined;
                    showOnReferrerHoverDelay?: number | undefined;
                    hideOnReferrerLeave?: boolean | undefined;
                    hideOnReferrerLeaveDelay?: number | undefined;
                } | undefined;
                splitIcon?: string | undefined;
                showTooltipOnHover?: boolean | undefined;
                showTooltipOnHoverDelay?: number | undefined;
                hideTooltipOnLeave?: boolean | undefined;
                splitClass?: string | undefined;
                tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                prop?: import("lkt-vue-kernel").LktObject | undefined;
                clickRef?: (Element | import("vue").VueElement) | undefined;
                events?: {
                    click?: Function | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        modalCallbacks?: {
            modalName: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            action: import("lkt-vue-kernel").ModalCallbackAction;
            method?: string | undefined;
            args?: import("lkt-vue-kernel").LktObject | undefined;
        }[] | undefined;
        tooltip?: {
            modelValue?: boolean | undefined;
            alwaysOpen?: boolean | undefined;
            class?: string | undefined;
            text?: string | undefined;
            icon?: string | undefined;
            iconAtEnd?: boolean | undefined;
            engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
            referrerMargin?: number | string | undefined;
            windowMargin?: number | string | undefined;
            referrerWidth?: boolean | undefined;
            referrer?: HTMLElement | undefined;
            locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
            locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
            showOnReferrerHover?: boolean | undefined;
            showOnReferrerHoverDelay?: number | undefined;
            hideOnReferrerLeave?: boolean | undefined;
            hideOnReferrerLeaveDelay?: number | undefined;
        } | undefined;
        splitIcon?: string | undefined;
        showTooltipOnHover?: boolean | undefined;
        showTooltipOnHoverDelay?: number | undefined;
        hideTooltipOnLeave?: boolean | undefined;
        splitClass?: string | undefined;
        tabindex?: import("lkt-vue-kernel").ValidTabIndex;
        prop?: import("lkt-vue-kernel").LktObject | undefined;
        clickRef?: (Element | import("vue").VueElement) | undefined;
        events?: {
            click?: Function | undefined;
        } | undefined;
    } | undefined;
    isActiveChecker?: Function | undefined;
    isOpened?: boolean | undefined;
    isActive?: boolean | undefined;
    parent?: /*elided*/ any | undefined;
    children?: /*elided*/ any[] | undefined;
    events?: {
        click?: Function | undefined;
    } | undefined;
    onClick?: Function | undefined;
}>, slots: Readonly<{
    [name: string]: import("vue").Slot<any> | undefined;
}>, isActive: import("vue").Ref<boolean, boolean>;
declare const onClickToggle: () => void, onClick: () => number;
declare const canRenderIcon: import("vue").ComputedRef<boolean | import("vue").Slot<any>>, classes: import("vue").ComputedRef<string>;
declare const entryIconSlots: import("vue").ComputedRef<string[]>, computedIsActive: import("vue").ComputedRef<boolean>, hasToggleSlot: import("vue").ComputedRef<boolean>, toggleSlot: import("vue").ComputedRef<string | import("vue").Component>;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_5: {}, __VLS_7: {}, __VLS_22: string, __VLS_23: {
    key: string | undefined;
    entry: {
        key?: string | undefined;
        type?: MenuEntryType | undefined;
        icon?: string | undefined;
        anchor?: {
            type?: import("lkt-vue-kernel").AnchorType | undefined;
            to?: string | {
                name?: import("vue-router").RouteRecordNameGeneric;
                params?: import("vue-router").RouteParamsRawGeneric | undefined;
                path?: undefined | undefined;
                query?: import("vue-router").LocationQueryRaw | undefined;
                hash?: string | undefined;
                replace?: boolean | undefined;
                force?: boolean | undefined;
                state?: import("vue-router").HistoryState | undefined;
            } | {
                path: string;
                query?: import("vue-router").LocationQueryRaw | undefined;
                hash?: string | undefined;
                replace?: boolean | undefined;
                force?: boolean | undefined;
                state?: import("vue-router").HistoryState | undefined;
            } | undefined;
            class?: string | undefined;
            isActive?: boolean | undefined;
            downloadFileName?: string | undefined;
            disabled?: boolean | undefined;
            confirmModal?: import("lkt-vue-kernel").ValidModalName;
            confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
            confirmData?: {
                [x: string]: any;
                [x: number]: any;
                modalName?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                zIndex?: number | undefined;
                type?: import("lkt-vue-kernel").ModalType | undefined;
                size?: string | undefined;
                preTitle?: string | undefined;
                preTitleIcon?: string | undefined;
                title?: string | undefined;
                closeIcon?: string | undefined;
                closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                showClose?: boolean | undefined;
                disabledClose?: boolean | undefined;
                disabledVeilClick?: boolean | undefined;
                hiddenFooter?: boolean | undefined;
                beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                item?: import("lkt-vue-kernel").LktObject | undefined;
                confirmButton?: {
                    type?: import("lkt-vue-kernel").ButtonType | undefined;
                    name?: string | undefined;
                    value?: string | undefined;
                    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                    openTooltip?: boolean | undefined;
                    loading?: boolean | undefined;
                    class?: string | undefined;
                    containerClass?: string | undefined;
                    wrapContent?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    icon?: string | undefined;
                    iconEnd?: string | undefined;
                    img?: string | undefined;
                    checked?: boolean | undefined;
                    textOn?: import("lkt-vue-kernel").ValidTextValue;
                    textOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                    anchor?: /*elided*/ any | {
                        type: import("lkt-vue-kernel").AnchorType;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class: string;
                        isActive: boolean;
                        downloadFileName: string;
                        disabled: boolean;
                        onClick: Function | undefined;
                        confirmModal: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                        confirmData: import("lkt-vue-kernel").LktObject;
                        imposter: boolean;
                        external: boolean;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        getHref: () => string;
                        feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                        assignProp: (key: string, value: any) => void;
                    } | undefined;
                    resource?: string | undefined;
                    resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                    modal?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    modalData?: Function | {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    modalCallbacks?: {
                        modalName: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        action: import("lkt-vue-kernel").ModalCallbackAction;
                        method?: string | undefined;
                        args?: import("lkt-vue-kernel").LktObject | undefined;
                    }[] | undefined;
                    tooltip?: {
                        modelValue?: boolean | undefined;
                        alwaysOpen?: boolean | undefined;
                        class?: string | undefined;
                        text?: string | undefined;
                        icon?: string | undefined;
                        iconAtEnd?: boolean | undefined;
                        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                        referrerMargin?: number | string | undefined;
                        windowMargin?: number | string | undefined;
                        referrerWidth?: boolean | undefined;
                        referrer?: HTMLElement | undefined;
                        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                        showOnReferrerHover?: boolean | undefined;
                        showOnReferrerHoverDelay?: number | undefined;
                        hideOnReferrerLeave?: boolean | undefined;
                        hideOnReferrerLeaveDelay?: number | undefined;
                    } | undefined;
                    splitIcon?: string | undefined;
                    showTooltipOnHover?: boolean | undefined;
                    showTooltipOnHoverDelay?: number | undefined;
                    hideTooltipOnLeave?: boolean | undefined;
                    splitClass?: string | undefined;
                    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                    prop?: import("lkt-vue-kernel").LktObject | undefined;
                    clickRef?: (Element | import("vue").VueElement) | undefined;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                } | undefined;
                cancelButton?: {
                    type?: import("lkt-vue-kernel").ButtonType | undefined;
                    name?: string | undefined;
                    value?: string | undefined;
                    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                    openTooltip?: boolean | undefined;
                    loading?: boolean | undefined;
                    class?: string | undefined;
                    containerClass?: string | undefined;
                    wrapContent?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    icon?: string | undefined;
                    iconEnd?: string | undefined;
                    img?: string | undefined;
                    checked?: boolean | undefined;
                    textOn?: import("lkt-vue-kernel").ValidTextValue;
                    textOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                    anchor?: /*elided*/ any | {
                        type: import("lkt-vue-kernel").AnchorType;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class: string;
                        isActive: boolean;
                        downloadFileName: string;
                        disabled: boolean;
                        onClick: Function | undefined;
                        confirmModal: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                        confirmData: import("lkt-vue-kernel").LktObject;
                        imposter: boolean;
                        external: boolean;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        getHref: () => string;
                        feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                        assignProp: (key: string, value: any) => void;
                    } | undefined;
                    resource?: string | undefined;
                    resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                    modal?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    modalData?: Function | {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: {
                        [x: string]: any;
                        [x: number]: any;
                        modalName?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        zIndex?: number | undefined;
                        type?: import("lkt-vue-kernel").ModalType | undefined;
                        size?: string | undefined;
                        preTitle?: string | undefined;
                        preTitleIcon?: string | undefined;
                        title?: string | undefined;
                        closeIcon?: string | undefined;
                        closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                        closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                        showClose?: boolean | undefined;
                        disabledClose?: boolean | undefined;
                        disabledVeilClick?: boolean | undefined;
                        hiddenFooter?: boolean | undefined;
                        beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                        item?: import("lkt-vue-kernel").LktObject | undefined;
                        confirmButton?: /*elided*/ any | undefined;
                        cancelButton?: /*elided*/ any | undefined;
                    } | undefined;
                    modalCallbacks?: {
                        modalName: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        action: import("lkt-vue-kernel").ModalCallbackAction;
                        method?: string | undefined;
                        args?: import("lkt-vue-kernel").LktObject | undefined;
                    }[] | undefined;
                    tooltip?: {
                        modelValue?: boolean | undefined;
                        alwaysOpen?: boolean | undefined;
                        class?: string | undefined;
                        text?: string | undefined;
                        icon?: string | undefined;
                        iconAtEnd?: boolean | undefined;
                        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                        referrerMargin?: number | string | undefined;
                        windowMargin?: number | string | undefined;
                        referrerWidth?: boolean | undefined;
                        referrer?: HTMLElement | undefined;
                        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                        showOnReferrerHover?: boolean | undefined;
                        showOnReferrerHoverDelay?: number | undefined;
                        hideOnReferrerLeave?: boolean | undefined;
                        hideOnReferrerLeaveDelay?: number | undefined;
                    } | undefined;
                    splitIcon?: string | undefined;
                    showTooltipOnHover?: boolean | undefined;
                    showTooltipOnHoverDelay?: number | undefined;
                    hideTooltipOnLeave?: boolean | undefined;
                    splitClass?: string | undefined;
                    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                    prop?: import("lkt-vue-kernel").LktObject | undefined;
                    clickRef?: (Element | import("vue").VueElement) | undefined;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            imposter?: boolean | undefined;
            external?: boolean | undefined;
            text?: import("lkt-vue-kernel").ValidTextValue;
            events?: {
                click?: Function | undefined;
            } | undefined;
            onClick?: Function | undefined;
        } | undefined;
        button?: {
            type?: import("lkt-vue-kernel").ButtonType | undefined;
            name?: string | undefined;
            value?: string | undefined;
            disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
            openTooltip?: boolean | undefined;
            loading?: boolean | undefined;
            class?: string | undefined;
            containerClass?: string | undefined;
            wrapContent?: boolean | undefined;
            text?: import("lkt-vue-kernel").ValidTextValue;
            icon?: string | undefined;
            iconEnd?: string | undefined;
            img?: string | undefined;
            checked?: boolean | undefined;
            textOn?: import("lkt-vue-kernel").ValidTextValue;
            textOff?: import("lkt-vue-kernel").ValidTextValue;
            iconOn?: import("lkt-vue-kernel").ValidTextValue;
            iconOff?: import("lkt-vue-kernel").ValidTextValue;
            iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
            iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
            dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
            anchor?: {
                type?: import("lkt-vue-kernel").AnchorType | undefined;
                to?: string | {
                    name?: import("vue-router").RouteRecordNameGeneric;
                    params?: import("vue-router").RouteParamsRawGeneric | undefined;
                    path?: undefined | undefined;
                    query?: import("vue-router").LocationQueryRaw | undefined;
                    hash?: string | undefined;
                    replace?: boolean | undefined;
                    force?: boolean | undefined;
                    state?: import("vue-router").HistoryState | undefined;
                } | {
                    path: string;
                    query?: import("vue-router").LocationQueryRaw | undefined;
                    hash?: string | undefined;
                    replace?: boolean | undefined;
                    force?: boolean | undefined;
                    state?: import("vue-router").HistoryState | undefined;
                } | undefined;
                class?: string | undefined;
                isActive?: boolean | undefined;
                downloadFileName?: string | undefined;
                disabled?: boolean | undefined;
                confirmModal?: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                confirmData?: {
                    [x: string]: any;
                    [x: number]: any;
                    modalName?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    zIndex?: number | undefined;
                    type?: import("lkt-vue-kernel").ModalType | undefined;
                    size?: string | undefined;
                    preTitle?: string | undefined;
                    preTitleIcon?: string | undefined;
                    title?: string | undefined;
                    closeIcon?: string | undefined;
                    closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                    closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                    showClose?: boolean | undefined;
                    disabledClose?: boolean | undefined;
                    disabledVeilClick?: boolean | undefined;
                    hiddenFooter?: boolean | undefined;
                    beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                    item?: import("lkt-vue-kernel").LktObject | undefined;
                    confirmButton?: {
                        type?: import("lkt-vue-kernel").ButtonType | undefined;
                        name?: string | undefined;
                        value?: string | undefined;
                        disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                        openTooltip?: boolean | undefined;
                        loading?: boolean | undefined;
                        class?: string | undefined;
                        containerClass?: string | undefined;
                        wrapContent?: boolean | undefined;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        icon?: string | undefined;
                        iconEnd?: string | undefined;
                        img?: string | undefined;
                        checked?: boolean | undefined;
                        textOn?: import("lkt-vue-kernel").ValidTextValue;
                        textOff?: import("lkt-vue-kernel").ValidTextValue;
                        iconOn?: import("lkt-vue-kernel").ValidTextValue;
                        iconOff?: import("lkt-vue-kernel").ValidTextValue;
                        iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                        iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                        dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                        anchor?: /*elided*/ any | {
                            type: import("lkt-vue-kernel").AnchorType;
                            to?: string | {
                                name?: import("vue-router").RouteRecordNameGeneric;
                                params?: import("vue-router").RouteParamsRawGeneric | undefined;
                                path?: undefined | undefined;
                                query?: import("vue-router").LocationQueryRaw | undefined;
                                hash?: string | undefined;
                                replace?: boolean | undefined;
                                force?: boolean | undefined;
                                state?: import("vue-router").HistoryState | undefined;
                            } | {
                                path: string;
                                query?: import("vue-router").LocationQueryRaw | undefined;
                                hash?: string | undefined;
                                replace?: boolean | undefined;
                                force?: boolean | undefined;
                                state?: import("vue-router").HistoryState | undefined;
                            } | undefined;
                            class: string;
                            isActive: boolean;
                            downloadFileName: string;
                            disabled: boolean;
                            onClick: Function | undefined;
                            confirmModal: import("lkt-vue-kernel").ValidModalName;
                            confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                            confirmData: import("lkt-vue-kernel").LktObject;
                            imposter: boolean;
                            external: boolean;
                            text?: import("lkt-vue-kernel").ValidTextValue;
                            events?: {
                                click?: Function | undefined;
                            } | undefined;
                            getHref: () => string;
                            feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                            assignProp: (key: string, value: any) => void;
                        } | undefined;
                        resource?: string | undefined;
                        resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                        modal?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        modalData?: Function | {
                            [x: string]: any;
                            [x: number]: any;
                            modalName?: import("lkt-vue-kernel").ValidModalName;
                            modalKey?: import("lkt-vue-kernel").ValidModalKey;
                            zIndex?: number | undefined;
                            type?: import("lkt-vue-kernel").ModalType | undefined;
                            size?: string | undefined;
                            preTitle?: string | undefined;
                            preTitleIcon?: string | undefined;
                            title?: string | undefined;
                            closeIcon?: string | undefined;
                            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                            showClose?: boolean | undefined;
                            disabledClose?: boolean | undefined;
                            disabledVeilClick?: boolean | undefined;
                            hiddenFooter?: boolean | undefined;
                            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                            item?: import("lkt-vue-kernel").LktObject | undefined;
                            confirmButton?: /*elided*/ any | undefined;
                            cancelButton?: /*elided*/ any | undefined;
                        } | undefined;
                        confirmModal?: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                        confirmData?: {
                            [x: string]: any;
                            [x: number]: any;
                            modalName?: import("lkt-vue-kernel").ValidModalName;
                            modalKey?: import("lkt-vue-kernel").ValidModalKey;
                            zIndex?: number | undefined;
                            type?: import("lkt-vue-kernel").ModalType | undefined;
                            size?: string | undefined;
                            preTitle?: string | undefined;
                            preTitleIcon?: string | undefined;
                            title?: string | undefined;
                            closeIcon?: string | undefined;
                            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                            showClose?: boolean | undefined;
                            disabledClose?: boolean | undefined;
                            disabledVeilClick?: boolean | undefined;
                            hiddenFooter?: boolean | undefined;
                            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                            item?: import("lkt-vue-kernel").LktObject | undefined;
                            confirmButton?: /*elided*/ any | undefined;
                            cancelButton?: /*elided*/ any | undefined;
                        } | undefined;
                        modalCallbacks?: {
                            modalName: import("lkt-vue-kernel").ValidModalName;
                            modalKey?: import("lkt-vue-kernel").ValidModalKey;
                            action: import("lkt-vue-kernel").ModalCallbackAction;
                            method?: string | undefined;
                            args?: import("lkt-vue-kernel").LktObject | undefined;
                        }[] | undefined;
                        tooltip?: {
                            modelValue?: boolean | undefined;
                            alwaysOpen?: boolean | undefined;
                            class?: string | undefined;
                            text?: string | undefined;
                            icon?: string | undefined;
                            iconAtEnd?: boolean | undefined;
                            engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                            referrerMargin?: number | string | undefined;
                            windowMargin?: number | string | undefined;
                            referrerWidth?: boolean | undefined;
                            referrer?: HTMLElement | undefined;
                            locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                            locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                            showOnReferrerHover?: boolean | undefined;
                            showOnReferrerHoverDelay?: number | undefined;
                            hideOnReferrerLeave?: boolean | undefined;
                            hideOnReferrerLeaveDelay?: number | undefined;
                        } | undefined;
                        splitIcon?: string | undefined;
                        showTooltipOnHover?: boolean | undefined;
                        showTooltipOnHoverDelay?: number | undefined;
                        hideTooltipOnLeave?: boolean | undefined;
                        splitClass?: string | undefined;
                        tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                        prop?: import("lkt-vue-kernel").LktObject | undefined;
                        clickRef?: (Element | import("vue").VueElement) | undefined;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                    } | undefined;
                    cancelButton?: {
                        type?: import("lkt-vue-kernel").ButtonType | undefined;
                        name?: string | undefined;
                        value?: string | undefined;
                        disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                        openTooltip?: boolean | undefined;
                        loading?: boolean | undefined;
                        class?: string | undefined;
                        containerClass?: string | undefined;
                        wrapContent?: boolean | undefined;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        icon?: string | undefined;
                        iconEnd?: string | undefined;
                        img?: string | undefined;
                        checked?: boolean | undefined;
                        textOn?: import("lkt-vue-kernel").ValidTextValue;
                        textOff?: import("lkt-vue-kernel").ValidTextValue;
                        iconOn?: import("lkt-vue-kernel").ValidTextValue;
                        iconOff?: import("lkt-vue-kernel").ValidTextValue;
                        iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                        iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                        dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                        anchor?: /*elided*/ any | {
                            type: import("lkt-vue-kernel").AnchorType;
                            to?: string | {
                                name?: import("vue-router").RouteRecordNameGeneric;
                                params?: import("vue-router").RouteParamsRawGeneric | undefined;
                                path?: undefined | undefined;
                                query?: import("vue-router").LocationQueryRaw | undefined;
                                hash?: string | undefined;
                                replace?: boolean | undefined;
                                force?: boolean | undefined;
                                state?: import("vue-router").HistoryState | undefined;
                            } | {
                                path: string;
                                query?: import("vue-router").LocationQueryRaw | undefined;
                                hash?: string | undefined;
                                replace?: boolean | undefined;
                                force?: boolean | undefined;
                                state?: import("vue-router").HistoryState | undefined;
                            } | undefined;
                            class: string;
                            isActive: boolean;
                            downloadFileName: string;
                            disabled: boolean;
                            onClick: Function | undefined;
                            confirmModal: import("lkt-vue-kernel").ValidModalName;
                            confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                            confirmData: import("lkt-vue-kernel").LktObject;
                            imposter: boolean;
                            external: boolean;
                            text?: import("lkt-vue-kernel").ValidTextValue;
                            events?: {
                                click?: Function | undefined;
                            } | undefined;
                            getHref: () => string;
                            feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                            assignProp: (key: string, value: any) => void;
                        } | undefined;
                        resource?: string | undefined;
                        resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                        modal?: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        modalData?: Function | {
                            [x: string]: any;
                            [x: number]: any;
                            modalName?: import("lkt-vue-kernel").ValidModalName;
                            modalKey?: import("lkt-vue-kernel").ValidModalKey;
                            zIndex?: number | undefined;
                            type?: import("lkt-vue-kernel").ModalType | undefined;
                            size?: string | undefined;
                            preTitle?: string | undefined;
                            preTitleIcon?: string | undefined;
                            title?: string | undefined;
                            closeIcon?: string | undefined;
                            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                            showClose?: boolean | undefined;
                            disabledClose?: boolean | undefined;
                            disabledVeilClick?: boolean | undefined;
                            hiddenFooter?: boolean | undefined;
                            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                            item?: import("lkt-vue-kernel").LktObject | undefined;
                            confirmButton?: /*elided*/ any | undefined;
                            cancelButton?: /*elided*/ any | undefined;
                        } | undefined;
                        confirmModal?: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                        confirmData?: {
                            [x: string]: any;
                            [x: number]: any;
                            modalName?: import("lkt-vue-kernel").ValidModalName;
                            modalKey?: import("lkt-vue-kernel").ValidModalKey;
                            zIndex?: number | undefined;
                            type?: import("lkt-vue-kernel").ModalType | undefined;
                            size?: string | undefined;
                            preTitle?: string | undefined;
                            preTitleIcon?: string | undefined;
                            title?: string | undefined;
                            closeIcon?: string | undefined;
                            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                            showClose?: boolean | undefined;
                            disabledClose?: boolean | undefined;
                            disabledVeilClick?: boolean | undefined;
                            hiddenFooter?: boolean | undefined;
                            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                            item?: import("lkt-vue-kernel").LktObject | undefined;
                            confirmButton?: /*elided*/ any | undefined;
                            cancelButton?: /*elided*/ any | undefined;
                        } | undefined;
                        modalCallbacks?: {
                            modalName: import("lkt-vue-kernel").ValidModalName;
                            modalKey?: import("lkt-vue-kernel").ValidModalKey;
                            action: import("lkt-vue-kernel").ModalCallbackAction;
                            method?: string | undefined;
                            args?: import("lkt-vue-kernel").LktObject | undefined;
                        }[] | undefined;
                        tooltip?: {
                            modelValue?: boolean | undefined;
                            alwaysOpen?: boolean | undefined;
                            class?: string | undefined;
                            text?: string | undefined;
                            icon?: string | undefined;
                            iconAtEnd?: boolean | undefined;
                            engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                            referrerMargin?: number | string | undefined;
                            windowMargin?: number | string | undefined;
                            referrerWidth?: boolean | undefined;
                            referrer?: HTMLElement | undefined;
                            locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                            locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                            showOnReferrerHover?: boolean | undefined;
                            showOnReferrerHoverDelay?: number | undefined;
                            hideOnReferrerLeave?: boolean | undefined;
                            hideOnReferrerLeaveDelay?: number | undefined;
                        } | undefined;
                        splitIcon?: string | undefined;
                        showTooltipOnHover?: boolean | undefined;
                        showTooltipOnHoverDelay?: number | undefined;
                        hideTooltipOnLeave?: boolean | undefined;
                        splitClass?: string | undefined;
                        tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                        prop?: import("lkt-vue-kernel").LktObject | undefined;
                        clickRef?: (Element | import("vue").VueElement) | undefined;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                    } | undefined;
                } | undefined;
                imposter?: boolean | undefined;
                external?: boolean | undefined;
                text?: import("lkt-vue-kernel").ValidTextValue;
                events?: {
                    click?: Function | undefined;
                } | undefined;
                onClick?: Function | undefined;
            } | {
                type: import("lkt-vue-kernel").AnchorType;
                to?: string | {
                    name?: import("vue-router").RouteRecordNameGeneric;
                    params?: import("vue-router").RouteParamsRawGeneric | undefined;
                    path?: undefined | undefined;
                    query?: import("vue-router").LocationQueryRaw | undefined;
                    hash?: string | undefined;
                    replace?: boolean | undefined;
                    force?: boolean | undefined;
                    state?: import("vue-router").HistoryState | undefined;
                } | {
                    path: string;
                    query?: import("vue-router").LocationQueryRaw | undefined;
                    hash?: string | undefined;
                    replace?: boolean | undefined;
                    force?: boolean | undefined;
                    state?: import("vue-router").HistoryState | undefined;
                } | undefined;
                class: string;
                isActive: boolean;
                downloadFileName: string;
                disabled: boolean;
                onClick: Function | undefined;
                confirmModal: import("lkt-vue-kernel").ValidModalName;
                confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                confirmData: import("lkt-vue-kernel").LktObject;
                imposter: boolean;
                external: boolean;
                text?: import("lkt-vue-kernel").ValidTextValue;
                events?: {
                    click?: Function | undefined;
                } | undefined;
                getHref: () => string;
                feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                assignProp: (key: string, value: any) => void;
            } | undefined;
            resource?: string | undefined;
            resourceData?: import("lkt-vue-kernel").LktObject | undefined;
            modal?: import("lkt-vue-kernel").ValidModalName;
            modalKey?: import("lkt-vue-kernel").ValidModalKey;
            modalData?: Function | {
                [x: string]: any;
                [x: number]: any;
                modalName?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                zIndex?: number | undefined;
                type?: import("lkt-vue-kernel").ModalType | undefined;
                size?: string | undefined;
                preTitle?: string | undefined;
                preTitleIcon?: string | undefined;
                title?: string | undefined;
                closeIcon?: string | undefined;
                closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                showClose?: boolean | undefined;
                disabledClose?: boolean | undefined;
                disabledVeilClick?: boolean | undefined;
                hiddenFooter?: boolean | undefined;
                beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                item?: import("lkt-vue-kernel").LktObject | undefined;
                confirmButton?: {
                    type?: import("lkt-vue-kernel").ButtonType | undefined;
                    name?: string | undefined;
                    value?: string | undefined;
                    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                    openTooltip?: boolean | undefined;
                    loading?: boolean | undefined;
                    class?: string | undefined;
                    containerClass?: string | undefined;
                    wrapContent?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    icon?: string | undefined;
                    iconEnd?: string | undefined;
                    img?: string | undefined;
                    checked?: boolean | undefined;
                    textOn?: import("lkt-vue-kernel").ValidTextValue;
                    textOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                    anchor?: {
                        type?: import("lkt-vue-kernel").AnchorType | undefined;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class?: string | undefined;
                        isActive?: boolean | undefined;
                        downloadFileName?: string | undefined;
                        disabled?: boolean | undefined;
                        confirmModal?: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                        confirmData?: {
                            [x: string]: any;
                            [x: number]: any;
                            modalName?: import("lkt-vue-kernel").ValidModalName;
                            modalKey?: import("lkt-vue-kernel").ValidModalKey;
                            zIndex?: number | undefined;
                            type?: import("lkt-vue-kernel").ModalType | undefined;
                            size?: string | undefined;
                            preTitle?: string | undefined;
                            preTitleIcon?: string | undefined;
                            title?: string | undefined;
                            closeIcon?: string | undefined;
                            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                            showClose?: boolean | undefined;
                            disabledClose?: boolean | undefined;
                            disabledVeilClick?: boolean | undefined;
                            hiddenFooter?: boolean | undefined;
                            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                            item?: import("lkt-vue-kernel").LktObject | undefined;
                            confirmButton?: /*elided*/ any | undefined;
                            cancelButton?: /*elided*/ any | undefined;
                        } | undefined;
                        imposter?: boolean | undefined;
                        external?: boolean | undefined;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        onClick?: Function | undefined;
                    } | {
                        type: import("lkt-vue-kernel").AnchorType;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class: string;
                        isActive: boolean;
                        downloadFileName: string;
                        disabled: boolean;
                        onClick: Function | undefined;
                        confirmModal: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                        confirmData: import("lkt-vue-kernel").LktObject;
                        imposter: boolean;
                        external: boolean;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        getHref: () => string;
                        feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                        assignProp: (key: string, value: any) => void;
                    } | undefined;
                    resource?: string | undefined;
                    resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                    modal?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    modalData?: Function | /*elided*/ any | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: /*elided*/ any | undefined;
                    modalCallbacks?: {
                        modalName: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        action: import("lkt-vue-kernel").ModalCallbackAction;
                        method?: string | undefined;
                        args?: import("lkt-vue-kernel").LktObject | undefined;
                    }[] | undefined;
                    tooltip?: {
                        modelValue?: boolean | undefined;
                        alwaysOpen?: boolean | undefined;
                        class?: string | undefined;
                        text?: string | undefined;
                        icon?: string | undefined;
                        iconAtEnd?: boolean | undefined;
                        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                        referrerMargin?: number | string | undefined;
                        windowMargin?: number | string | undefined;
                        referrerWidth?: boolean | undefined;
                        referrer?: HTMLElement | undefined;
                        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                        showOnReferrerHover?: boolean | undefined;
                        showOnReferrerHoverDelay?: number | undefined;
                        hideOnReferrerLeave?: boolean | undefined;
                        hideOnReferrerLeaveDelay?: number | undefined;
                    } | undefined;
                    splitIcon?: string | undefined;
                    showTooltipOnHover?: boolean | undefined;
                    showTooltipOnHoverDelay?: number | undefined;
                    hideTooltipOnLeave?: boolean | undefined;
                    splitClass?: string | undefined;
                    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                    prop?: import("lkt-vue-kernel").LktObject | undefined;
                    clickRef?: (Element | import("vue").VueElement) | undefined;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                } | undefined;
                cancelButton?: {
                    type?: import("lkt-vue-kernel").ButtonType | undefined;
                    name?: string | undefined;
                    value?: string | undefined;
                    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                    openTooltip?: boolean | undefined;
                    loading?: boolean | undefined;
                    class?: string | undefined;
                    containerClass?: string | undefined;
                    wrapContent?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    icon?: string | undefined;
                    iconEnd?: string | undefined;
                    img?: string | undefined;
                    checked?: boolean | undefined;
                    textOn?: import("lkt-vue-kernel").ValidTextValue;
                    textOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                    anchor?: {
                        type?: import("lkt-vue-kernel").AnchorType | undefined;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class?: string | undefined;
                        isActive?: boolean | undefined;
                        downloadFileName?: string | undefined;
                        disabled?: boolean | undefined;
                        confirmModal?: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                        confirmData?: {
                            [x: string]: any;
                            [x: number]: any;
                            modalName?: import("lkt-vue-kernel").ValidModalName;
                            modalKey?: import("lkt-vue-kernel").ValidModalKey;
                            zIndex?: number | undefined;
                            type?: import("lkt-vue-kernel").ModalType | undefined;
                            size?: string | undefined;
                            preTitle?: string | undefined;
                            preTitleIcon?: string | undefined;
                            title?: string | undefined;
                            closeIcon?: string | undefined;
                            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                            showClose?: boolean | undefined;
                            disabledClose?: boolean | undefined;
                            disabledVeilClick?: boolean | undefined;
                            hiddenFooter?: boolean | undefined;
                            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                            item?: import("lkt-vue-kernel").LktObject | undefined;
                            confirmButton?: /*elided*/ any | undefined;
                            cancelButton?: /*elided*/ any | undefined;
                        } | undefined;
                        imposter?: boolean | undefined;
                        external?: boolean | undefined;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        onClick?: Function | undefined;
                    } | {
                        type: import("lkt-vue-kernel").AnchorType;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class: string;
                        isActive: boolean;
                        downloadFileName: string;
                        disabled: boolean;
                        onClick: Function | undefined;
                        confirmModal: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                        confirmData: import("lkt-vue-kernel").LktObject;
                        imposter: boolean;
                        external: boolean;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        getHref: () => string;
                        feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                        assignProp: (key: string, value: any) => void;
                    } | undefined;
                    resource?: string | undefined;
                    resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                    modal?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    modalData?: Function | /*elided*/ any | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: /*elided*/ any | undefined;
                    modalCallbacks?: {
                        modalName: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        action: import("lkt-vue-kernel").ModalCallbackAction;
                        method?: string | undefined;
                        args?: import("lkt-vue-kernel").LktObject | undefined;
                    }[] | undefined;
                    tooltip?: {
                        modelValue?: boolean | undefined;
                        alwaysOpen?: boolean | undefined;
                        class?: string | undefined;
                        text?: string | undefined;
                        icon?: string | undefined;
                        iconAtEnd?: boolean | undefined;
                        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                        referrerMargin?: number | string | undefined;
                        windowMargin?: number | string | undefined;
                        referrerWidth?: boolean | undefined;
                        referrer?: HTMLElement | undefined;
                        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                        showOnReferrerHover?: boolean | undefined;
                        showOnReferrerHoverDelay?: number | undefined;
                        hideOnReferrerLeave?: boolean | undefined;
                        hideOnReferrerLeaveDelay?: number | undefined;
                    } | undefined;
                    splitIcon?: string | undefined;
                    showTooltipOnHover?: boolean | undefined;
                    showTooltipOnHoverDelay?: number | undefined;
                    hideTooltipOnLeave?: boolean | undefined;
                    splitClass?: string | undefined;
                    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                    prop?: import("lkt-vue-kernel").LktObject | undefined;
                    clickRef?: (Element | import("vue").VueElement) | undefined;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            confirmModal?: import("lkt-vue-kernel").ValidModalName;
            confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
            confirmData?: {
                [x: string]: any;
                [x: number]: any;
                modalName?: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                zIndex?: number | undefined;
                type?: import("lkt-vue-kernel").ModalType | undefined;
                size?: string | undefined;
                preTitle?: string | undefined;
                preTitleIcon?: string | undefined;
                title?: string | undefined;
                closeIcon?: string | undefined;
                closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                showClose?: boolean | undefined;
                disabledClose?: boolean | undefined;
                disabledVeilClick?: boolean | undefined;
                hiddenFooter?: boolean | undefined;
                beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                item?: import("lkt-vue-kernel").LktObject | undefined;
                confirmButton?: {
                    type?: import("lkt-vue-kernel").ButtonType | undefined;
                    name?: string | undefined;
                    value?: string | undefined;
                    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                    openTooltip?: boolean | undefined;
                    loading?: boolean | undefined;
                    class?: string | undefined;
                    containerClass?: string | undefined;
                    wrapContent?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    icon?: string | undefined;
                    iconEnd?: string | undefined;
                    img?: string | undefined;
                    checked?: boolean | undefined;
                    textOn?: import("lkt-vue-kernel").ValidTextValue;
                    textOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                    anchor?: {
                        type?: import("lkt-vue-kernel").AnchorType | undefined;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class?: string | undefined;
                        isActive?: boolean | undefined;
                        downloadFileName?: string | undefined;
                        disabled?: boolean | undefined;
                        confirmModal?: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                        confirmData?: {
                            [x: string]: any;
                            [x: number]: any;
                            modalName?: import("lkt-vue-kernel").ValidModalName;
                            modalKey?: import("lkt-vue-kernel").ValidModalKey;
                            zIndex?: number | undefined;
                            type?: import("lkt-vue-kernel").ModalType | undefined;
                            size?: string | undefined;
                            preTitle?: string | undefined;
                            preTitleIcon?: string | undefined;
                            title?: string | undefined;
                            closeIcon?: string | undefined;
                            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                            showClose?: boolean | undefined;
                            disabledClose?: boolean | undefined;
                            disabledVeilClick?: boolean | undefined;
                            hiddenFooter?: boolean | undefined;
                            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                            item?: import("lkt-vue-kernel").LktObject | undefined;
                            confirmButton?: /*elided*/ any | undefined;
                            cancelButton?: /*elided*/ any | undefined;
                        } | undefined;
                        imposter?: boolean | undefined;
                        external?: boolean | undefined;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        onClick?: Function | undefined;
                    } | {
                        type: import("lkt-vue-kernel").AnchorType;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class: string;
                        isActive: boolean;
                        downloadFileName: string;
                        disabled: boolean;
                        onClick: Function | undefined;
                        confirmModal: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                        confirmData: import("lkt-vue-kernel").LktObject;
                        imposter: boolean;
                        external: boolean;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        getHref: () => string;
                        feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                        assignProp: (key: string, value: any) => void;
                    } | undefined;
                    resource?: string | undefined;
                    resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                    modal?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    modalData?: Function | /*elided*/ any | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: /*elided*/ any | undefined;
                    modalCallbacks?: {
                        modalName: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        action: import("lkt-vue-kernel").ModalCallbackAction;
                        method?: string | undefined;
                        args?: import("lkt-vue-kernel").LktObject | undefined;
                    }[] | undefined;
                    tooltip?: {
                        modelValue?: boolean | undefined;
                        alwaysOpen?: boolean | undefined;
                        class?: string | undefined;
                        text?: string | undefined;
                        icon?: string | undefined;
                        iconAtEnd?: boolean | undefined;
                        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                        referrerMargin?: number | string | undefined;
                        windowMargin?: number | string | undefined;
                        referrerWidth?: boolean | undefined;
                        referrer?: HTMLElement | undefined;
                        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                        showOnReferrerHover?: boolean | undefined;
                        showOnReferrerHoverDelay?: number | undefined;
                        hideOnReferrerLeave?: boolean | undefined;
                        hideOnReferrerLeaveDelay?: number | undefined;
                    } | undefined;
                    splitIcon?: string | undefined;
                    showTooltipOnHover?: boolean | undefined;
                    showTooltipOnHoverDelay?: number | undefined;
                    hideTooltipOnLeave?: boolean | undefined;
                    splitClass?: string | undefined;
                    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                    prop?: import("lkt-vue-kernel").LktObject | undefined;
                    clickRef?: (Element | import("vue").VueElement) | undefined;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                } | undefined;
                cancelButton?: {
                    type?: import("lkt-vue-kernel").ButtonType | undefined;
                    name?: string | undefined;
                    value?: string | undefined;
                    disabled?: import("lkt-vue-kernel").ValidIsDisabledValue;
                    openTooltip?: boolean | undefined;
                    loading?: boolean | undefined;
                    class?: string | undefined;
                    containerClass?: string | undefined;
                    wrapContent?: boolean | undefined;
                    text?: import("lkt-vue-kernel").ValidTextValue;
                    icon?: string | undefined;
                    iconEnd?: string | undefined;
                    img?: string | undefined;
                    checked?: boolean | undefined;
                    textOn?: import("lkt-vue-kernel").ValidTextValue;
                    textOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconOff?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOn?: import("lkt-vue-kernel").ValidTextValue;
                    iconEndOff?: import("lkt-vue-kernel").ValidTextValue;
                    dot?: import("lkt-vue-kernel").ValidButtonDot | undefined;
                    anchor?: {
                        type?: import("lkt-vue-kernel").AnchorType | undefined;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class?: string | undefined;
                        isActive?: boolean | undefined;
                        downloadFileName?: string | undefined;
                        disabled?: boolean | undefined;
                        confirmModal?: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                        confirmData?: {
                            [x: string]: any;
                            [x: number]: any;
                            modalName?: import("lkt-vue-kernel").ValidModalName;
                            modalKey?: import("lkt-vue-kernel").ValidModalKey;
                            zIndex?: number | undefined;
                            type?: import("lkt-vue-kernel").ModalType | undefined;
                            size?: string | undefined;
                            preTitle?: string | undefined;
                            preTitleIcon?: string | undefined;
                            title?: string | undefined;
                            closeIcon?: string | undefined;
                            closeConfirm?: import("lkt-vue-kernel").ValidModalName;
                            closeConfirmKey?: import("lkt-vue-kernel").ValidModalKey;
                            showClose?: boolean | undefined;
                            disabledClose?: boolean | undefined;
                            disabledVeilClick?: boolean | undefined;
                            hiddenFooter?: boolean | undefined;
                            beforeClose?: import("lkt-vue-kernel").ValidBeforeCloseModal;
                            item?: import("lkt-vue-kernel").LktObject | undefined;
                            confirmButton?: /*elided*/ any | undefined;
                            cancelButton?: /*elided*/ any | undefined;
                        } | undefined;
                        imposter?: boolean | undefined;
                        external?: boolean | undefined;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        onClick?: Function | undefined;
                    } | {
                        type: import("lkt-vue-kernel").AnchorType;
                        to?: string | {
                            name?: import("vue-router").RouteRecordNameGeneric;
                            params?: import("vue-router").RouteParamsRawGeneric | undefined;
                            path?: undefined | undefined;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | {
                            path: string;
                            query?: import("vue-router").LocationQueryRaw | undefined;
                            hash?: string | undefined;
                            replace?: boolean | undefined;
                            force?: boolean | undefined;
                            state?: import("vue-router").HistoryState | undefined;
                        } | undefined;
                        class: string;
                        isActive: boolean;
                        downloadFileName: string;
                        disabled: boolean;
                        onClick: Function | undefined;
                        confirmModal: import("lkt-vue-kernel").ValidModalName;
                        confirmModalKey: import("lkt-vue-kernel").ValidModalKey;
                        confirmData: import("lkt-vue-kernel").LktObject;
                        imposter: boolean;
                        external: boolean;
                        text?: import("lkt-vue-kernel").ValidTextValue;
                        events?: {
                            click?: Function | undefined;
                        } | undefined;
                        getHref: () => string;
                        feed: (data?: import("lkt-vue-kernel").LktObject, target?: import("lkt-vue-kernel").Anchor | undefined) => void;
                        assignProp: (key: string, value: any) => void;
                    } | undefined;
                    resource?: string | undefined;
                    resourceData?: import("lkt-vue-kernel").LktObject | undefined;
                    modal?: import("lkt-vue-kernel").ValidModalName;
                    modalKey?: import("lkt-vue-kernel").ValidModalKey;
                    modalData?: Function | /*elided*/ any | undefined;
                    confirmModal?: import("lkt-vue-kernel").ValidModalName;
                    confirmModalKey?: import("lkt-vue-kernel").ValidModalKey;
                    confirmData?: /*elided*/ any | undefined;
                    modalCallbacks?: {
                        modalName: import("lkt-vue-kernel").ValidModalName;
                        modalKey?: import("lkt-vue-kernel").ValidModalKey;
                        action: import("lkt-vue-kernel").ModalCallbackAction;
                        method?: string | undefined;
                        args?: import("lkt-vue-kernel").LktObject | undefined;
                    }[] | undefined;
                    tooltip?: {
                        modelValue?: boolean | undefined;
                        alwaysOpen?: boolean | undefined;
                        class?: string | undefined;
                        text?: string | undefined;
                        icon?: string | undefined;
                        iconAtEnd?: boolean | undefined;
                        engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                        referrerMargin?: number | string | undefined;
                        windowMargin?: number | string | undefined;
                        referrerWidth?: boolean | undefined;
                        referrer?: HTMLElement | undefined;
                        locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                        locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                        showOnReferrerHover?: boolean | undefined;
                        showOnReferrerHoverDelay?: number | undefined;
                        hideOnReferrerLeave?: boolean | undefined;
                        hideOnReferrerLeaveDelay?: number | undefined;
                    } | undefined;
                    splitIcon?: string | undefined;
                    showTooltipOnHover?: boolean | undefined;
                    showTooltipOnHoverDelay?: number | undefined;
                    hideTooltipOnLeave?: boolean | undefined;
                    splitClass?: string | undefined;
                    tabindex?: import("lkt-vue-kernel").ValidTabIndex;
                    prop?: import("lkt-vue-kernel").LktObject | undefined;
                    clickRef?: (Element | import("vue").VueElement) | undefined;
                    events?: {
                        click?: Function | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            modalCallbacks?: {
                modalName: import("lkt-vue-kernel").ValidModalName;
                modalKey?: import("lkt-vue-kernel").ValidModalKey;
                action: import("lkt-vue-kernel").ModalCallbackAction;
                method?: string | undefined;
                args?: import("lkt-vue-kernel").LktObject | undefined;
            }[] | undefined;
            tooltip?: {
                modelValue?: boolean | undefined;
                alwaysOpen?: boolean | undefined;
                class?: string | undefined;
                text?: string | undefined;
                icon?: string | undefined;
                iconAtEnd?: boolean | undefined;
                engine?: import("lkt-vue-kernel").TooltipPositionEngine | undefined;
                referrerMargin?: number | string | undefined;
                windowMargin?: number | string | undefined;
                referrerWidth?: boolean | undefined;
                referrer?: HTMLElement | undefined;
                locationY?: import("lkt-vue-kernel").TooltipLocationY | undefined;
                locationX?: import("lkt-vue-kernel").TooltipLocationX | undefined;
                showOnReferrerHover?: boolean | undefined;
                showOnReferrerHoverDelay?: number | undefined;
                hideOnReferrerLeave?: boolean | undefined;
                hideOnReferrerLeaveDelay?: number | undefined;
            } | undefined;
            splitIcon?: string | undefined;
            showTooltipOnHover?: boolean | undefined;
            showTooltipOnHoverDelay?: number | undefined;
            hideTooltipOnLeave?: boolean | undefined;
            splitClass?: string | undefined;
            tabindex?: import("lkt-vue-kernel").ValidTabIndex;
            prop?: import("lkt-vue-kernel").LktObject | undefined;
            clickRef?: (Element | import("vue").VueElement) | undefined;
            events?: {
                click?: Function | undefined;
            } | undefined;
        } | undefined;
        isActiveChecker?: Function | undefined;
        isOpened?: boolean | undefined;
        isActive?: boolean | undefined;
        parent?: /*elided*/ any | undefined;
        children?: /*elided*/ any[] | undefined;
        events?: {
            click?: Function | undefined;
        } | undefined;
        onClick?: Function | undefined;
    };
}, __VLS_34: string, __VLS_35: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    [K in NonNullable<typeof __VLS_22>]?: (props: typeof __VLS_23) => any;
} & {
    [K in NonNullable<typeof __VLS_34>]?: (props: typeof __VLS_35) => any;
} & {
    tooltip?: (props: typeof __VLS_5) => any;
} & {
    split?: (props: typeof __VLS_7) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<__VLS_Props, {
    MenuEntryType: typeof MenuEntryType;
    entry: typeof entry;
    slots: typeof slots;
    isActive: typeof isActive;
    onClickToggle: typeof onClickToggle;
    onClick: typeof onClick;
    canRenderIcon: typeof canRenderIcon;
    classes: typeof classes;
    entryIconSlots: typeof entryIconSlots;
    computedIsActive: typeof computedIsActive;
    hasToggleSlot: typeof hasToggleSlot;
    toggleSlot: typeof toggleSlot;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    modelValue: MenuEntryConfig;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<__VLS_Props, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    modelValue: MenuEntryConfig;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
